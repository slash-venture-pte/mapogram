clone:
  depth: full

# Project
image: node:17

options:
  docker: true

definitions:
  caches:
    sonar: ~/.sonar/cache
    yarn: /usr/local/share/.cache/yarn
  services:
    docker:
      memory: 2048  # reduce memory for docker-in-docker from 1GB to 512MB

pipelines:
  branches:
    develop:
      - step:
          size: 2x 
          name: Build docker
          deployment: testbuild
          script:
          - export BUILD_ID=dev-$BITBUCKET_BUILD_NUMBER
          - export IMAGE_NAME_LATEST=$DOCKER_REGISTRY_SERVER_URL/$DOCKER_CUSTOM_IMAGE_NAME:latest
          - export IMAGE_NAME_BUILD=$DOCKER_REGISTRY_SERVER_URL/$DOCKER_CUSTOM_IMAGE_NAME:$BUILD_ID
          # build the Docker image (this will use the Dockerfile in the root of the repo)
          - docker build -t $IMAGE_NAME_BUILD .
          - docker tag $IMAGE_NAME_BUILD $IMAGE_NAME_LATEST
          # authenticate with the Docker Hub registry
          - docker login $DOCKER_REGISTRY_SERVER_URL --username $DOCKER_REGISTRY_SERVER_USER --password $DOCKER_REGISTRY_SERVER_PASSWORD
          # push the new Docker image to the Docker registry
          - docker push $IMAGE_NAME_BUILD
          - docker push $IMAGE_NAME_LATEST
      - step:
          name: Deploy Application to VPS
          deployment: test
          script: 
            # - pipe: microsoft/azure-web-apps-containers-deploy:1.0.2
            #   variables:
            #     AZURE_APP_ID: $AZURE_APP_ID
            #     AZURE_PASSWORD: $AZURE_PASSWORD
            #     AZURE_TENANT_ID: $AZURE_TENANT_ID
            #     AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
            #     AZURE_APP_NAME: $AZURE_APP_NAME
            #     DOCKER_CUSTOM_IMAGE_NAME: $DOCKER_REGISTRY_SERVER_URL/$DOCKER_CUSTOM_IMAGE_NAME:latest
            #     DOCKER_REGISTRY_SERVER_URL: $DOCKER_REGISTRY_SERVER_URL
            #     DOCKER_REGISTRY_SERVER_USER: $DOCKER_REGISTRY_SERVER_USER
            #     DOCKER_REGISTRY_SERVER_PASSWORD: $DOCKER_REGISTRY_SERVER_PASSWORD
            #     DEBUG: 'true'
            - scp ./docker/qgis/nginx.conf ubuntu@$HOST_IP:/home/ubuntu/project-data/ngnix
            - docker login $DOCKER_REGISTRY_SERVER_URL --username $DOCKER_REGISTRY_SERVER_USER --password $DOCKER_REGISTRY_SERVER_PASSWORD
            - curl -L https://github.com/docker/compose/releases/download/v2.10.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            - chmod +x /usr/local/bin/docker-compose
            - /usr/local/bin/docker-compose up -d --remove-orphans --always-recreate-deps
  custom:
    build-gis-server-image:
      - step:
          size: 2x 
          name: Build docker
          deployment: testbuild
          script:
          - export BUILD_ID=dev-$BITBUCKET_BUILD_NUMBER
          - export IMAGE_NAME_LATEST=$DOCKER_REGISTRY_SERVER_URL/gis-server:latest
          - export IMAGE_NAME_BUILD=$DOCKER_REGISTRY_SERVER_URL/gis-server:$BUILD_ID
          - docker build -t $IMAGE_NAME_BUILD ./docker/qgis
          - docker tag $IMAGE_NAME_BUILD $IMAGE_NAME_LATEST
          # authenticate with the Docker Hub registry
          - docker login $DOCKER_REGISTRY_SERVER_URL --username $DOCKER_REGISTRY_SERVER_USER --password $DOCKER_REGISTRY_SERVER_PASSWORD
          # push the new Docker image to the Docker registry
          - docker push $IMAGE_NAME_BUILD
          - docker push $IMAGE_NAME_LATEST